name: terraform-destroy
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: "true"

jobs:
  destroy:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID:       ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET:   ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_TENANT_ID:       ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
      ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (client secret)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      # -------- MAIN (destroy VM etc. using the remote backend) --------
      - name: Terraform init (main with backend)
        working-directory: terraform
        run: |
          terraform init -input=false -no-color -lock-timeout=5m \
            -backend-config="resource_group_name=${{ vars.BACKEND_RG }}" \
            -backend-config="storage_account_name=${{ vars.BACKEND_SA }}" \
            -backend-config="container_name=${{ vars.BACKEND_CN }}" \
            -backend-config="key=${{ vars.BACKEND_KEY }}"

      # main destroy still requires vars declared by the root module
      - name: Terraform destroy (main)
        working-directory: terraform
        run: |
          terraform destroy -auto-approve -input=false -no-color -lock-timeout=5m \
            -var "location=${{ vars.TF_LOCATION || 'westeurope' }}" \
            -var "vm_admin_username=${{ vars.VM_ADMIN_USERNAME || 'azureuser' }}" \
            -var "ssh_public_key_data=${{ secrets.SSH_PUBLIC_KEY }}"

      # -------- BACKEND CLEANUP (import-if-exists -> empty container -> destroy) --------
      - name: Terraform init (bootstrap)
        working-directory: terraform/backend-bootstrap
        run: terraform init -input=false -no-color

      # import existing backend resources into bootstrap state if they exist
      - name: Import backend if exists
        working-directory: terraform/backend-bootstrap
        shell: bash
        run: |
          set -euo pipefail
          SUBID="${ARM_SUBSCRIPTION_ID}"
          RG="${{ vars.BACKEND_RG }}"
          SA="${{ vars.BACKEND_SA }}"
          CN="${{ vars.BACKEND_CN }}"

          # RG
          if az group exists -n "$RG" | grep -qi true; then
            terraform state show azurerm_resource_group.tfstate >/dev/null 2>&1 || \
              terraform import azurerm_resource_group.tfstate "/subscriptions/${SUBID}/resourceGroups/${RG}"
          else
            echo "RG not found; skipping import."
          fi

          # SA
          SA_ID="$(az storage account show -g "$RG" -n "$SA" --query id -o tsv 2>/dev/null || true)"
          if [[ -n "$SA_ID" ]]; then
            terraform state show azurerm_storage_account.tfstate >/dev/null 2>&1 || \
              terraform import azurerm_storage_account.tfstate "$SA_ID"
          else
            echo "Storage Account not found; skipping import."
          fi

          # Container (import by URL form; ignore failure if missing)
          CN_URL="https://${SA}.blob.core.windows.net/${CN}"
          terraform state show azurerm_storage_container.tfstate >/dev/null 2>&1 || \
            terraform import azurerm_storage_container.tfstate "$CN_URL" || true

      # empty the container so SA delete wonâ€™t fail due to leftover blobs
      - name: Empty state container (best effort)
        shell: bash
        run: |
          set -euo pipefail
          RG="${{ vars.BACKEND_RG }}"
          SA="${{ vars.BACKEND_SA }}"
          CN="${{ vars.BACKEND_CN }}"
          if az storage account show -g "$RG" -n "$SA" >/dev/null 2>&1; then
            echo "Deleting blobs in $CN @ $SA ..."
            az storage blob delete-batch --account-name "$SA" -s "$CN" --auth-mode login --no-progress || true
          else
            echo "Storage Account not found; skipping delete-batch."
          fi

      - name: Terraform destroy (bootstrap)
        working-directory: terraform/backend-bootstrap
        run: |
          terraform destroy -auto-approve -input=false -no-color -lock-timeout=5m \
            -var "location=${{ vars.TF_LOCATION || 'westeurope' }}" \
            -var "backend_resource_group=${{ vars.BACKEND_RG }}" \
            -var "backend_storage_account=${{ vars.BACKEND_SA }}" \
            -var "backend_container=${{ vars.BACKEND_CN }}" \
            -var "backend_key=${{ vars.BACKEND_KEY }}"
